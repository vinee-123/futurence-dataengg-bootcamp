{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ea5deded",
   "metadata": {},
   "outputs": [],
   "source": [
    "import findspark\n",
    "findspark.init()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b237e882",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark import SparkContext"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "366ef212",
   "metadata": {},
   "outputs": [],
   "source": [
    "sc=SparkContext(\"local\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d2138406",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.sql import SparkSession\n",
    "spark = SparkSession.builder.master(\"local[1]\") \\\n",
    "                    .appName('SparkByExamples.com') \\\n",
    "                    .getOrCreate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0804f088",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.sql.functions import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8fec1436",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1.\tLoad data from Bankmarketdata.csv\n",
    "Bank_DF = spark.read.format(\"csv\").load(\"C:/Users/miles.MILE-BL-4409-LA/futurense_hadoop-pyspark/labs/dataset/bankmarket/bankmarketdata.csv\", header=True, sep = \";\", escape = \",\", inferSchema = True )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "b600f482",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---+------------+--------+---------+-------+-------+-------+----+-------+---+-----+--------+--------+-----+--------+--------+---+\n",
      "|age|         job| marital|education|default|balance|housing|loan|contact|day|month|duration|campaign|pdays|previous|poutcome|  y|\n",
      "+---+------------+--------+---------+-------+-------+-------+----+-------+---+-----+--------+--------+-----+--------+--------+---+\n",
      "| 58|  management| married| tertiary|     no|   2143|    yes|  no|unknown|  5|  may|     261|       1|   -1|       0| unknown| no|\n",
      "| 44|  technician|  single|secondary|     no|     29|    yes|  no|unknown|  5|  may|     151|       1|   -1|       0| unknown| no|\n",
      "| 33|entrepreneur| married|secondary|     no|      2|    yes| yes|unknown|  5|  may|      76|       1|   -1|       0| unknown| no|\n",
      "| 47| blue-collar| married|  unknown|     no|   1506|    yes|  no|unknown|  5|  may|      92|       1|   -1|       0| unknown| no|\n",
      "| 33|     unknown|  single|  unknown|     no|      1|     no|  no|unknown|  5|  may|     198|       1|   -1|       0| unknown| no|\n",
      "| 35|  management| married| tertiary|     no|    231|    yes|  no|unknown|  5|  may|     139|       1|   -1|       0| unknown| no|\n",
      "| 28|  management|  single| tertiary|     no|    447|    yes| yes|unknown|  5|  may|     217|       1|   -1|       0| unknown| no|\n",
      "| 42|entrepreneur|divorced| tertiary|    yes|      2|    yes|  no|unknown|  5|  may|     380|       1|   -1|       0| unknown| no|\n",
      "| 58|     retired| married|  primary|     no|    121|    yes|  no|unknown|  5|  may|      50|       1|   -1|       0| unknown| no|\n",
      "| 43|  technician|  single|secondary|     no|    593|    yes|  no|unknown|  5|  may|      55|       1|   -1|       0| unknown| no|\n",
      "| 41|      admin.|divorced|secondary|     no|    270|    yes|  no|unknown|  5|  may|     222|       1|   -1|       0| unknown| no|\n",
      "| 29|      admin.|  single|secondary|     no|    390|    yes|  no|unknown|  5|  may|     137|       1|   -1|       0| unknown| no|\n",
      "| 53|  technician| married|secondary|     no|      6|    yes|  no|unknown|  5|  may|     517|       1|   -1|       0| unknown| no|\n",
      "| 58|  technician| married|  unknown|     no|     71|    yes|  no|unknown|  5|  may|      71|       1|   -1|       0| unknown| no|\n",
      "| 57|    services| married|secondary|     no|    162|    yes|  no|unknown|  5|  may|     174|       1|   -1|       0| unknown| no|\n",
      "| 51|     retired| married|  primary|     no|    229|    yes|  no|unknown|  5|  may|     353|       1|   -1|       0| unknown| no|\n",
      "| 45|      admin.|  single|  unknown|     no|     13|    yes|  no|unknown|  5|  may|      98|       1|   -1|       0| unknown| no|\n",
      "| 57| blue-collar| married|  primary|     no|     52|    yes|  no|unknown|  5|  may|      38|       1|   -1|       0| unknown| no|\n",
      "| 60|     retired| married|  primary|     no|     60|    yes|  no|unknown|  5|  may|     219|       1|   -1|       0| unknown| no|\n",
      "| 33|    services| married|secondary|     no|      0|    yes|  no|unknown|  5|  may|      54|       1|   -1|       0| unknown| no|\n",
      "+---+------------+--------+---------+-------+-------+-------+----+-------+---+-----+--------+--------+-----+--------+--------+---+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "Bank_DF.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6436f1fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "45211"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "count_total=Bank_DF.count()\n",
    "count_total\n",
    "# Bank_m=spark.createDataFrame(rdd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "b8beb8e9",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (1082461653.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[31], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    2.\tGive marketing success rate. (No. of people subscribed / total no. of entries)\u001b[0m\n\u001b[1;37m      \t^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "# 2.\tGive marketing success rate. (No. of people subscribed / total no. of entries)\n",
    "Success_rate=(Bank_DF[Bank_DF[\"y\"]=='yes'].count()/count_total)*100\n",
    "Success_rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "b2208512",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (210440804.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[30], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    3.\tGive marketing failure rate\u001b[0m\n\u001b[1;37m      \t^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "# 3.\tGive marketing failure rate\n",
    "Failure_Rate=(Bank_DF[Bank_DF[\"y\"]=='no'].count()/count_total)*100\n",
    "Failure_Rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "996c60f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------+\n",
      "|max(age)|\n",
      "+--------+\n",
      "|      95|\n",
      "+--------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# 4.\tMaximum, Mean, and Minimum age of the average targeted customer\n",
    "Max_Age=Bank_DF.select(max(\"age\")).show()\n",
    "Max_Age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b5e492de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----------------+\n",
      "|         avg(age)|\n",
      "+-----------------+\n",
      "|40.93621021432837|\n",
      "+-----------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "Avg_Age=Bank_DF.select(mean(\"age\")).show()\n",
    "Avg_Age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6887ee76",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------+\n",
      "|min(age)|\n",
      "+--------+\n",
      "|      18|\n",
      "+--------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "Min_Age=Bank_DF.select(min(\"age\")).show()\n",
    "Min_Age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "77726c0e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------+\n",
      "|      avg(balance)|\n",
      "+------------------+\n",
      "|1362.2720576850766|\n",
      "+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# 5.\tCheck the quality of customers by checking the average balance, median balance of customers\n",
    "Avg_Balance=Bank_DF.select(mean(\"balance\")).show()\n",
    "Avg_Balance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "c02ba00d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[448.0]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Median=Bank_DF.approxQuantile('balance', [0.5], 0)\n",
    "Median"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ac5e6fb9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---+-----+\n",
      "|age|count|\n",
      "+---+-----+\n",
      "| 18|   12|\n",
      "| 19|   35|\n",
      "| 20|   50|\n",
      "| 21|   79|\n",
      "| 22|  129|\n",
      "| 23|  202|\n",
      "| 24|  302|\n",
      "| 25|  527|\n",
      "| 26|  805|\n",
      "| 27|  909|\n",
      "| 28| 1038|\n",
      "| 29| 1185|\n",
      "| 30| 1757|\n",
      "| 31| 1996|\n",
      "| 32| 2085|\n",
      "| 33| 1972|\n",
      "| 34| 1930|\n",
      "| 35| 1894|\n",
      "| 36| 1806|\n",
      "| 37| 1696|\n",
      "+---+-----+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# 6.\tCheck if age matters in marketing subscription for deposit\n",
    "Bank_DF.groupBy('age').count().sort(\"age\").show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ba47fc28",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------+-----+\n",
      "| marital|count|\n",
      "+--------+-----+\n",
      "|divorced| 5207|\n",
      "| married|27214|\n",
      "|  single|12790|\n",
      "+--------+-----+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# 7.\tCheck if marital status mattered for subscription to deposit.\n",
    "Bank_DF.groupBy('marital').count().show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "607f5160",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---+--------+-----+\n",
      "|age| marital|count|\n",
      "+---+--------+-----+\n",
      "| 18|  single|   12|\n",
      "| 19|  single|   35|\n",
      "| 20|  single|   47|\n",
      "| 20| married|    3|\n",
      "| 21|  single|   74|\n",
      "| 21| married|    5|\n",
      "| 22| married|    9|\n",
      "| 22|  single|  120|\n",
      "| 23|  single|  175|\n",
      "| 23| married|   27|\n",
      "| 24|divorced|    1|\n",
      "| 24|  single|  248|\n",
      "| 24| married|   53|\n",
      "| 25|divorced|    6|\n",
      "| 25| married|   98|\n",
      "| 25|  single|  423|\n",
      "| 26| married|  170|\n",
      "| 26|divorced|   20|\n",
      "| 26|  single|  615|\n",
      "| 27| married|  233|\n",
      "+---+--------+-----+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# 8.\tCheck if age and marital status together mattered for subscription to deposit scheme\n",
    "Bank_DF.groupBy(\"age\",'marital').count().sort('age').show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a556e9e0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "984829af",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e78983cf",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fcd86072",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "108734e4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}